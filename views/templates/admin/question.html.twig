{%  extends '@PrestaShop/Admin/layout.html.twig' %}
{% block content %}

	<hr>

	<div class="row justify-content-center">
		<div class="col">
			{% block article_form %}
				{{ form_start(questionForm) }}
				<div class="card">
					<h3 class="card-header">
						<i class="material-icons">edit</i>
						{{ 'Question' | trans({}, 'Modules.Expressopinionlite.Admin')}}
					</h3>
					<div class="card-block">
						<div class="form-wrapper card-test">
							{{ form_errors(questionForm)}}

							{% block push_form_rest %}
								{{ form_rest(questionForm)}}
							{% endblock %}
						</div>
					</div>
					<div class="card-footer">
						<a href="{{path('oit_article_index') }}" class="btn btn-outline-secondary">
							{{ 'Cancel' | trans({}, 'Admin.Actions') }}</a>
						<button class="btn btn-primary float-right">
							{{ 'Update' | trans({}, 'Admin.Actions') }}
						</button>
					</div>
				</div>
				{{ form_end(questionForm)}}
			{% endblock %}
		</div>
	</div>
	
    <hr>

	<div class="row justify-content-center">
		<div class="col">
			<div class="card">
				<h3 class="card-header">
					<i class="material-icons">edit</i>
					{{ 'Reponses associées à la question' | trans({}, 'Modules.Expressopinionlite.Admin')}}
				</h3>
				<div class="card-block">
					<table id="myTable" class="table">
						<thead>
							<tr>
								<th scope="col" class="col-1">#</th>
								<th scope="col"><span class="edit-icon">&#9998;</span>Réponse</th>
							</tr>
						</thead>
						<tbody>
						 {% for rep in responses %}
      						 <tr>
								<th scope="row">{{ rep.id}}</th>
								<td contenteditable="true"> {{rep.content}} </td>
							</tr>
    {% endfor %}
						</tbody>
					</table>
				</div>
				<div class="card-footer"></div>
			</div>
		</div>
	</div>

<pre>
    {{ dump(responses) }}
</pre>
	<style>

		.edit-icon {
			display: inline-block;
			margin-right: 5px; /* Espacement entre l'icône et le texte */
			font-size: 14px; /* Taille de l'icône */
			color: #125478; /* Couleur de l'icône */
		}

		.spinner {
			border: 6px solid #f3f3f3; /* Light grey */
			border-top: 6px solid #3498db; /* Blue */
			border-radius: 50%;
			width: 20px;
			height: 20px;
			animation: spin 2s linear infinite;
		}

		@keyframes spin {
		0% { transform: rotate(0deg); }
		100% { transform: rotate(360deg); }
		}

		.statusok{
			margin-right: 5px;
				background-color: green;
				color: #fff;
				width: 150px;
				height: 20px;
		}

		.stauserror{
						margin-right: 5px;
				background-color: red;
				color: #fff;
				width: 150px;
				height: 20px;
		}

	</style>

	<script>

function getBaseUrl() {
    let pathSegments = window.location.pathname.split('/');
    let prefix = pathSegments[1];
    return window.location.origin + '/' + prefix + '/express-opinion-lite';
}

var params = new URLSearchParams(window.location.search);

// Récupérer la valeur du paramètre _token
var tokenValue = params.get('_token');

/*

    document.addEventListener("DOMContentLoaded", function() {
    // Sélectionnez tous les éléments td de la deuxième colonne (index 1)
    let nameCells = document.querySelectorAll('#myTable tr td:nth-child(2)');

    // Ajoutez un écouteur d'événements à chaque cellule
    nameCells.forEach(cell => {
        cell.addEventListener('blur', function () { 
            // Récupérez l'ID et le nom de la ligne correspondante
            let id = this.parentElement.querySelector('th').innerText;
            let name = this.innerText;
let spinner = document.createElement('div');
 spinner.className = 'spinner'; // Add your spinner CSS class
            this.appendChild(spinner);
          

    fetch(getBaseUrl() + '/response/a/edit'+'?_token='+tokenValue ,{
        // spiner
		  
           
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: id, content: name, questionId: 1 })
				  // ajout un spinner
            })
             .then(response => {
				console.log(response)
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
              
                    return response.json();
            })
            .then(data => {
                console.log(data.message); // Afficher la réponse du contrôleur
         // Remove the spinner
               spinner.remove(); 
		  })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
            // Affichez l'ID et le nom dans la console par exemple
            console.log("ID: " + id + ", Name: " + name);
			// Remove the spinner
            //   spinner.remove();
        });
    });
});
*/
document.addEventListener("DOMContentLoaded", () => {
    const nameCells = document.querySelectorAll('#myTable tr td:nth-child(2)');

    nameCells.forEach(cell => {
		const rowId = cell.parentElement.querySelector('th').innerText; // ID de la ligne associée

        let originalContents = {}; // Objet pour stocker les contenus d'origine des cellules par ID de ligne

		 cell.addEventListener('focus', () => { 
            // Stocker le contenu d'origine de la cellule lorsqu'elle gagne le focus
              originalContents[rowId] = cell.innerText.trim();
			  cell.style.whiteSpace = 'nowrap'; 
        });
		 cell.addEventListener('keydown', event => {
            if (event.key === 'Enter') {
                event.preventDefault(); // Empêcher le saut de ligne lorsque la touche "Enter" est pressée
                cell.blur(); // Enlever le focus de la cellule
            }
        });
        cell.addEventListener('blur', () => { 
            const id = cell.parentElement.querySelector('th').innerText;
            const name = cell.innerText;
            const row = cell.parentElement;

			 // Stocker le contenu d'origine de la cellule

		// console.log(originalContents)

            const spinner = document.createElement('div');
            spinner.className = 'spinner'; // Ajoutez votre classe CSS pour le spinner
            cell.appendChild(spinner);

            fetch(`${getBaseUrl()}/response/a/edit?_token=${tokenValue}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id, content: name, questionId : 1 }) //questionId
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data.message); // Afficher la réponse du contrôleur
				displayErrorMessage(cell, "Succes message here", "statusok");
                spinner.remove(); 
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
                cell.innerText = originalContents[rowId];
 				spinner.remove(); 
 				displayErrorMessage(cell, "Error message here", "stauserror");
			})

            console.log(`ID: ${id}, Name: ${name}`);
        });

		
    });
});


const displayErrorMessage = (cell, notifier, className) => {
    const message = document.createElement('span');
    message.className = className;
    message.textContent = notifier;
    cell.appendChild(message); // Ajouter le message à la cellule
    
    setTimeout(() => {
        message.remove(); // Supprimer le message après un certain délai
    }, 5000);
}


	</script>

{% endblock %}
