{%  extends '@PrestaShop/Admin/layout.html.twig' %}
{% block content %}
<section class="container mt-5">
<div id="calendar" class="card panel">
	<form action="http://localhost:8080/admin983auezka27chc8n6ya/express-opinion-lite/vote/a" method="post" id="calendar_form" name="calendar_form" class="form-inline">
		<div class="row">
			<div class="col-lg-6">
				<div class="btn-group">
					<button type="submit" name="submitDateDay" class="btn btn-default submitDateDay">Jour</button>
					<button type="submit" name="submitDateMonth" class="btn btn-default submitDateMonth">Mois</button>
					<button type="submit" name="submitDateYear" class="btn btn-default submitDateYear">Année</button>
					<button type="submit" name="submitDateDayPrev" class="btn btn-default submitDateDayPrev">Jour-1</button>
					<button type="submit" name="submitDateMonthPrev" class="btn btn-default submitDateMonthPrev">Mois-1</button>
					<button type="submit" name="submitDateYearPrev" class="btn btn-default submitDateYearPrev">Année-1</button>
				</div>
			</div>
			<div class="col-lg-6">
				<div class="row">
					<div class="col-md-8">
						<div class="row">
							<div class="col-xs-6">
								<div class="input-group">
									<label class="input-group-addon">Du</label>
									<input type="text" name="datepickerFrom" id="datepickerFrom" value="2024-01-01" class="datepicker form-control hasDatepicker">
								</div>
							</div>
							<div class="col-xs-6">
								<div class="input-group">
									<label class="input-group-addon">au</label>
									<input type="text" name="datepickerTo" id="datepickerTo" value="2024-02-27" class="datepicker form-control hasDatepicker">
								</div>
							</div>
						</div>
					</div>
					<div class="col-md-4">
						<div class="row">
							<button type="submit" name="submitDatePicker" id="submitDatePicker" class="btn btn-default"><i class="icon-save"></i> Rechecher</button>
						</div>
					</div>
				</div>
			</div>
		</div>
	</form>
</div>
</section>
<section class="container mt-5">
    <div class ="row">
        <div class="col-12">
          
        
          	<div class="card">
		
        			<h3 class="card-header">
					Date : Lundi 29 Avril
						
					</h3>
					<div class="card-block">
						<p><span> {{ 'Question :' | trans({}, 'Modules.Expressopinionlite.Admin')}}</span>  {{question}}</p>
					</div>
				
				</div>
        </div>
    </div>

</section>
<section class="container mt-2">
    <div class="row">
        <div class="col-12 col-md-6"> 
   	        <div class="card">
	 			<h3 class="card-header">				
					{{ 'data :' | trans({}, 'Modules.Expressopinionlite.Admin')}}
				</h3>
				<div class="card-body">
                    <table class="table table-striped">
						<thead>
                            <tr>
                            <th scope="col">reponse</th>
                            <th scope="col">nombre</th>
                            </tr>
                        </thead>
                        <tbody>
              
                        {# {% if question is not empty %} #}
    {# Display question #}
{# {% else %} #}
    {# Display a default message or nothing #}
{# {% endif %} #}
                            <tr>
                                <td>oui</td>
                                <td>50</td>
                            </tr>
                            <tr>
                                <td>non</td>
                                <td>20</td>  
                            </tr>
                            <tr>
                                <td>nspp</td>
                                <td>7</td>           
                            </tr>
                        </tbody>
                    </table>
				</div>
			</div>
        </div>
   
        <div class="col-12 col-md-6">
                 <div class="card">
	 			<h3 class="card-header">				
					{{ 'Graphique :' | trans({}, 'Modules.Expressopinionlite.Admin')}}
				</h3>
				<div class="card-body">
                   <canvas id="chart-epl" width="400" height="400"></canvas>
				</div>
			</div>
        </div>
    </div> 
</section>
{#  #}
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
let myChart = null;

function getBaseUrl() {
    let pathSegments = window.location.pathname.split('/');
    let prefix = pathSegments[1];
    return window.location.origin + '/' + prefix + '/express-opinion-lite';
}


document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('#calendar_form');
    const submitButtons = form.querySelectorAll('button[type="submit"]');
    const datepickerFrom = document.querySelector('#datepickerFrom');
    const datepickerTo = document.querySelector('#datepickerTo');

    submitButtons.forEach(button => {
        button.addEventListener('click', function(event) {
            handleFormSubmit(event, this);
        });
    });

  
    
    datepickerFrom.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {

            event.preventDefault()
            triggerSubmitDatePicker();
        }
    });

    datepickerTo.addEventListener('keydown', function(event) {
        if (event.key === 'Enter') {
            event.preventDefault()
            triggerSubmitDatePicker();
        }
    });

    function handleFormSubmit(event, button) {
        event.preventDefault();

        const buttonName = button.getAttribute('name');
        const formData = new FormData();
        const url = form.getAttribute('action');
        const method = form.getAttribute('method');

        formData.append('buttonName', buttonName);

        if (buttonName === "submitDatePicker") {
            const dateFrom = document.querySelector('#datepickerFrom').value;
            const dateTo = document.querySelector('#datepickerTo').value;
            formData.append('dateFrom', dateFrom);
            formData.append('dateTo', dateTo);
        }

       fetchNewData(formData)
            .then(data => {
             resetData(); 
               displayNewData(data); 
            })
            .catch(error => {
                
                console.error('Error fetching data:', error);
            });
  

    }

    function triggerSubmitDatePicker() {
        const submitDatePickerButton = form.querySelector('#submitDatePicker');
        submitDatePickerButton.click();
    }
});




function resetData() {
    const tbody = document.querySelector('tbody')
    tbody.innerHTML = ''
}


function fetchNewData(formData) {

    const params = new URLSearchParams(window.location.search)
    const tokenValue = params.get('_token')





    return fetch(`${getBaseUrl()}/vote/a?_token=${tokenValue}`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
      //  console.log(data);
 
        return data
      
    })
    .catch(error => {
        console.error('Error fetching data:', error);
    });
}


function displayNewData(data) {
    //write charjs
    if (myChart !== null) {
            myChart.destroy();
        }

        const ctx = document.getElementById('chart-epl').getContext('2d');
        myChart = new Chart(ctx, chartConfig(data));

    

    // write tabla
    const tbody = document.querySelector('tbody');
    // Object.keys(data).forEach(key => {
    //     const items = JSON.parse(data[0]);
    //  console.log(items)
    //     // Ensuite, vérifiez si 'items' est un tableau avant d'utiliser 'forEach'
    //     if (Array.isArray(items.data)) {
    //         items.data.forEach(item => {
    //             const row = document.createElement('tr');
    //             const reponseCell = document.createElement('td');
    //             reponseCell.textContent = item.responseContent;
    //             const nombreCell = document.createElement('td');
    //             nombreCell.textContent = item.voteCount;

    //             row.appendChild(reponseCell);
    //             row.appendChild(nombreCell);
    //             tbody.appendChild(row);
    //         });
    //     } else {
    //         console.log('items is not an array');
    //     }
    // });
const items = JSON.parse(data[0]);
// Vérifiez si 'items' est un tableau avant d'utiliser 'forEach'
if (Array.isArray(items.data)) {
  items.data.forEach(item => {
    const row = document.createElement('tr');
    const reponseCell = document.createElement('td');
    reponseCell.textContent = item.responseContent;
    const nombreCell = document.createElement('td');
    nombreCell.textContent = item.voteCount;

    row.appendChild(reponseCell);
    row.appendChild(nombreCell);
    tbody.appendChild(row);
  });
} else {
  console.log('items.data is not an array');
}

    // modifie affichage de date 
// getDateFormulaire(data.dayactif);
}



function loadData() {
 console.log('start load data')
   // Garder une référence au graphique pour pouvoir le mettre à jour

    resetData()
         const formData = new FormData()
        formData.append('buttonName', 'submitDateDay');
      fetchNewData(formData)
            .then(data => {
            
               displayNewData(data);
            })
            .catch(error => {
                
                console.error('Error fetching data:', error);
            });
    
}
// function getDateFormulaire(buttonName) {
//     let currentDate = new Date(); 
//     console.log(buttonName)
//     let fromDate = null, toDate = null;

//     switch (buttonName) {
//         case "submitDateDay":
//             fromDate = toDate = currentDate.toISOString().split('T')[0];
//             break;
//         case "submitDateMonth":
//             currentDate.setDate(1);
//             fromDate = toDate = currentDate.toISOString().split('T')[0];
//             break;
//         case "submitDateYear":
//             currentDate.setMonth(0); 
//             currentDate.setDate(1);
//             fromDate = toDate = currentDate.toISOString().split('T')[0];
//             break;
//         case "submitDateDayPrev":
//             currentDate.setDate(currentDate.getDate() - 1);
//             fromDate = toDate = currentDate.toISOString().split('T')[0];
//             break;
//         case "submitDateMonthPrev":
//             currentDate.setMonth(currentDate.getMonth() - 1);
//             fromDate = toDate = currentDate.toISOString().split('T')[0];
//             break;
//         case "submitDateYearPrev":
//             currentDate.setFullYear(currentDate.getFullYear() - 1);
//             fromDate = toDate = currentDate.toISOString().split('T')[0];
//             break;
//         case "submitDatePicker":
//             // Récupérer les dates sélectionnées dans les champs de date
//             fromDate = document.querySelector('#datepickerFrom').value;
//             toDate = document.querySelector('#datepickerTo').value;
//             break;
//         default:
//             // Utiliser la date actuelle pour tout autre cas
//             fromDate = toDate = currentDate.toISOString().split('T')[0];
//             break;
//     }

//     console.log(fromDate, toDate);
//     return { fromDate, toDate };
// }


window.addEventListener('load', (event) => {
    let myChart = null;
   loadData();
});

// chart js
// chart js
function chartConfig(data) {
    // Configuration du graphique

      const dataArray = JSON.parse(data[0]);
const dataArrayData = dataArray.data
    const chartData = {
        labels:  dataArrayData.map(item => item.responseContent),
        datasets: [{
            label: 'Votes',
            data: dataArrayData.map(item => item.voteCount),
            backgroundColor: [
                'rgba(255, 99, 132, 0.2)',
                'rgba(54, 162, 235, 0.2)',
                'rgba(255, 206, 86, 0.2)',
                'rgba(75, 192, 192, 0.2)',
                'rgba(153, 102, 255, 0.2)',
                'rgba(255, 159, 64, 0.2)'
            ],
            borderColor: [
                'rgba(255, 99, 132, 1)',
                'rgba(54, 162, 235, 1)',
                'rgba(255, 206, 86, 1)',
                'rgba(75, 192, 192, 1)',
                'rgba(153, 102, 255, 1)',
                'rgba(255, 159, 64, 1)'
            ],
            borderWidth: 1
        }]
    };

    const chartConfig = {
        type: 'doughnut',
        data: chartData,
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top',
                },
                title: {
                    display: false,
                   
                }
            }
        }
    };

    return chartConfig;
}

    // Sélectionnez le contexte du graphique
   

</script>
{% endblock %}